<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode-Array-001-TwoSum</title>
      <link href="/2020/06/26/leetcode-array-001-twosum/"/>
      <url>/2020/06/26/leetcode-array-001-twosum/</url>
      
        <content type="html"><![CDATA[<h1 id="01-两数之和"><a href="#01-两数之和" class="headerlink" title="01.两数之和"></a>01.两数之和</h1><ul><li><strong>题目描述：</strong><br>　　给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</li><li><strong>示例：</strong><br>　　给定 nums = [2, 7, 11, 15], target = 9<br>　　因为 nums[0] + nums[1] = 2 + 7 = 9，所以返回 [0, 1]</li></ul><hr><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//方法1：暴力法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> j <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//方法2：两遍哈希表</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> kvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvs<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> kvs<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            kvs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvs<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> kvs<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> kvs<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//方法3：一遍哈希表</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> kvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvs<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>complement<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> kvs<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> kvs<span class="token punctuation">[</span>complement<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kvs<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            kvs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//函数入口：</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos <span class="token operator">=</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"[{0},{1}]"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><ul><li><strong>效率消耗，空间换时间</strong></li></ul><p><img src="/images/LeetCode/Array/Array01-TwoSum.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深海探宝》</title>
      <link href="/2020/06/09/shen-hai-tan-bao/"/>
      <url>/2020/06/09/shen-hai-tan-bao/</url>
      
        <content type="html"><![CDATA[<h4 id="工具：DirectX-amp-amp-Visual-Studio-2017"><a href="#工具：DirectX-amp-amp-Visual-Studio-2017" class="headerlink" title="工具：DirectX &amp;&amp; Visual Studio 2017"></a>工具：DirectX &amp;&amp; Visual Studio 2017</h4><p>　　本项目游戏的类型是海洋题材冒险解密类型，游戏场景是二维空间，使用第三人称视角进行游戏。</p><p>　　<strong>游戏背景</strong>《深海探宝》是以“阿波丸”号沉没历史为原型创作。玩家在海底冒险解密的过程中，一步一步发掘“阿波丸”号沉船隐藏的谜团和宝藏。</p><p>　　<strong>游戏剧情</strong>逻辑建立在一次虚构的阿波丸号的深海勘探故事下。玩家扮演探险家在游戏中通过物品片段化的线索还原出船上曾经有过一位中国学者不惧危险前来夺宝但最终在船上遇难。最终玩家完成游戏成功回收国宝北京人头盖骨。旨在表达中国学者薪火相传的不畏困难、机智勇敢的民族精神和书生意气。</p><p>　　<strong>游戏玩法</strong>玩家通过点击方向键回避海洋危险并进行移动，点击空格键以利用道具与场景中的物件进行互动，达到解开沉船废墟关卡之谜的目的并推进游戏进度解读历史剧情。</p><h3 id="视频展示："><a href="#视频展示：" class="headerlink" title="视频展示："></a>视频展示：</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=370945753&amp;bvid=BV1wZ4y1H7L1&amp;cid=200218358&amp;page=1" scrolling="no" border="0" frameborder="0" framespacing="0" loading="lazy" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Unity游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课堂设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《NightMare》</title>
      <link href="/2020/06/09/nightmare/"/>
      <url>/2020/06/09/nightmare/</url>
      
        <content type="html"><![CDATA[<h4 id="工具：Unity3D-2018-amp-amp-Visual-Studio-2017"><a href="#工具：Unity3D-2018-amp-amp-Visual-Studio-2017" class="headerlink" title="工具：Unity3D 2018 &amp;&amp; Visual Studio 2017"></a>工具：Unity3D 2018 &amp;&amp; Visual Studio 2017</h4><p>　　本项目游戏的类型是敏捷休闲类型，游戏场景是二维空间，使用第三人称视角进行游戏。</p><h3 id="视频展示："><a href="#视频展示：" class="headerlink" title="视频展示："></a>视频展示：</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=455979192&amp;bvid=BV1E5411W7b3&amp;cid=200217367&amp;page=1" scrolling="no" border="0" frameborder="0" framespacing="0" loading="lazy" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Unity游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课堂设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计：《失落城堡》</title>
      <link href="/2020/06/09/bi-ye-she-ji-shi-luo-cheng-bao/"/>
      <url>/2020/06/09/bi-ye-she-ji-shi-luo-cheng-bao/</url>
      
        <content type="html"><![CDATA[<h4 id="工具：Unity3D-2018-4-12-amp-amp-Visual-Studio-2017"><a href="#工具：Unity3D-2018-4-12-amp-amp-Visual-Studio-2017" class="headerlink" title="工具：Unity3D 2018.4.12 &amp;&amp; Visual Studio 2017"></a>工具：Unity3D 2018.4.12 &amp;&amp; Visual Studio 2017</h4><p>　　本项目游戏的类型是RTS（即时战略游戏）类型，游戏场景是三维空间，使用第三人称视角进行游戏。</p><p>　　<strong>游戏背景</strong>是发生在十八世纪的欧亚大陆上，有一个怪物在城堡里召唤出来了一大堆恶魔，妄图借此统治整个欧亚大陆，在征伐的路上，遇上了我们玩家所扮演的一名堡主，因不想与之同流合污却遭到了他的报复，对玩家的城堡发动了攻击，玩家无可奈何之下只能出兵发起抵抗，玩家需要通过派出训练士兵，与进攻我方城堡的敌人进行搏斗，阻止敌人征伐的脚步并保护我方城堡。</p><p>　　<strong>游戏玩法</strong>是通过训练不同种类的士兵与敌方的士兵进行搏斗，直到摧毁敌人的城堡获得胜利。敌我两方的兵种分别有步兵、射手、巨人、机器人、盾兵、骑矛手、巫师、小妖精和骷髅人，以及城堡前的护城大炮。护城大炮需要通过一定时间的填充弹药方进行发射，而兵种之间存在克制关系。如图2-1所示，其克制关系分别是：骑兵克制步兵和射手，巨人克制盾兵，盾兵克制射手，射手克制步兵，步兵克制巫师，而小妖精是通过巫师召唤出现。巨人的目标很明确，只会攻击城堡和吸引火力；巫师只能召唤小妖精进行战斗，巫师本身并不会战斗；射手和步兵则会攻击其他不同角色，只是由于克制关系的存在会导致角色之间造成的伤害不一样等等。每个角色相应的伤害、血量和赏金都不一样，通过击败敌人角色以获得相应的金币训练自身部队士兵，玩家通过鼠标左键点击控制角色士兵的生成，可以通过拉动选取地图上已有的士兵，选定的角色可以通过鼠标右键进行移动到指定的位置上进行战斗等等。</p><h3 id="视频展示："><a href="#视频展示：" class="headerlink" title="视频展示："></a>视频展示：</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=968473762&amp;bvid=BV1xp4y1D7L6&amp;cid=199697427&amp;page=1" scrolling="no" border="0" frameborder="0" framespacing="0" loading="lazy" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Unity游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickSort</title>
      <link href="/2020/01/10/quicksort/"/>
      <url>/2020/01/10/quicksort/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><u>快速排序</u>是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlog<sup>n</sup>) 次比较。在最坏状况下则需要 Ο(n<sup>2</sup>) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlog<sup>n</sup>) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br>　　快速排序使用二分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists），所以log的底数为2。<br>　　快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br><strong>算法步骤</strong><br>1、从数列中挑出一个元素，称为 “基准”（pivot）;<br>2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br>3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：O(nlog<sub>2</sub><sup>n</sup>)<br>最坏时间复杂度：O(n<sup>2</sup>)<br>最好时间复杂度：O(nlog<sub>2</sub><sup>n</sup>)<br>空间复杂度：O(nlog<sub>2</sub><sup>n</sup>)<br>稳定性：不稳定</p><h3 id="CPP实现"><a href="#CPP实现" class="headerlink" title="CPP实现"></a>CPP实现</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//获得数组长度</span><span class="token keyword">int</span> <span class="token function">GetArrayLength</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打印输出方法</span><span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token keyword">int</span>  arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>               cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> ends<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//标准分隔函数</span><span class="token keyword">int</span> <span class="token function">Parititionl</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//拿到分隔后数组的第一个作为基准数。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断基准数右边的值是否比基准数大，如果大于则right指针往前挪。</span>               <span class="token punctuation">{</span>                       right<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//把小于基准数的值放到基准数的左边去。</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断基准数左边的值是否比基准数小，如果小于则left指针往后挪。</span>               <span class="token punctuation">{</span>                       left<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//把大于基准数的值放到基数的右边去。</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//把基准数归位。</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//快速排序算法</span><span class="token keyword">void</span> <span class="token function">Quick_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>               <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">Parititionl</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//继续处理左边的</span>               <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//继续处理右边的</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">Display</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GetArrayLength</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Display</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="CSharp实现"><a href="#CSharp实现" class="headerlink" title="CSharp实现"></a>CSharp实现</h3><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">QuickSort</span>  <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">Display</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Display</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 标准分隔函数</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="arr">待排序数组&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="left">左指针&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="right">右指针&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Parititionl</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> p <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//拿到分隔后数组的第一个作为基准数。</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断基准数右边的值是否比基准数大，如果大于则right指针往前挪。</span>        <span class="token punctuation">{</span>          right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把小于基准数的值放到基准数的左边去。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断基准数左边的值是否比基准数小，如果小于则left指针往后挪。</span>        <span class="token punctuation">{</span>          left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把大于基准数的值放到基数的右边去。</span>      <span class="token punctuation">}</span>      arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//把基准数归位。</span>      <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 快速排序算法</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="arr">待排序数组&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="left">左指针&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="right">右指针&lt;/param></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Quick_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">Parititionl</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续处理左边的</span>        <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续处理右边的</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 打印输出信息</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="arr">待打印的数组&lt;/param></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token keyword">value</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0}\0"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BubbleSort</title>
      <link href="/2020/01/06/bubblesort/"/>
      <url>/2020/01/06/bubblesort/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p><u>冒泡排序（Bubble Sort）</u>也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><strong>算法步骤</strong><br>1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>3、针对所有的元素重复以上的步骤，除了最后一个。<br>4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：O(n<sup>2</sup>)<br>最坏时间复杂度：O(n<sup>2</sup>)<br>最好时间复杂度：O(n)<br>空间复杂度：O(1)<br>稳定性：稳定</p><h3 id="CPP实现"><a href="#CPP实现" class="headerlink" title="CPP实现"></a>CPP实现</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//获得数组长度</span><span class="token keyword">int</span> <span class="token function">GetArrayLength</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//交换方法</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡排序算法</span><span class="token keyword">void</span> <span class="token function">Dubble_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">GetArrayLength</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Dubble_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> ends<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Dubble_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                  <span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CSharp实现"><a href="#CSharp实现" class="headerlink" title="CSharp实现"></a>CSharp实现</h3><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">Dubble_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 交换方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="x">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="y">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">ref</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>            x <span class="token operator">=</span> y<span class="token punctuation">;</span>            y <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 冒泡排序算法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="arr">待排序的数组&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Dubble_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">ref</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结</title>
      <link href="/2019/12/31/2019-nian-zong-jie/"/>
      <url>/2019/12/31/2019-nian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　其实这个基于GitHub Pages的静态网站仓库在今年(2019)年初的时候就搭建好了，只是一直没用上。原因一是当时没打算花太多时间和精力在这里面，习惯在本地TXT文件或者在线印象笔记的md文档上记录笔记，再加上当时在忙着准备简历去面试实习等就搁一边去了；原因二是由于这种“个人式网站”的博客需要花费一定精力，在往后的日子里能持续更新维护。对比CSDN和博客园等较成熟的技术平台，让你更注重内容输出而不需要亲自维护服务器；原因三是博客和文章的受关注度和巨大的流量入口更是让个人平台稍逊一筹(真香警告)。前段时间离职后，整理印象笔记的技术文档时，让我发现了这个遗忘一段时间的GitHub Pages Blog。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>　　生活上没什么特别有感想的地方，吃好睡好准时作息，就是对自己最好的负责。上半年在学校的时候，每天晚上23.30分(周五六晚除外)有宿管阿姨准时吹哨子提醒关灯作息。虽然大家都会打开桌上的小台灯继续做自己的事，但是酝酿睡意的氛围在慢慢发酵，无形地督促着我们早点上床休息。<br>　　下半年因为出去实习了，需要独自租房。再也没人会准时吹哨子提醒你或者跟你说：It’s time to sleep.而我实习所在公司的工作时间是10106制（早上10点上班，晚上22点下班，一周工作6天）。我一般情况下打车回到家差不多11点，打开热水器等水热了后洗完澡，吹头发，洗完衣服等等，基本12点多了。有人跟我说：“你早上可是10点才上班呢！”其实我更倾向于早上能早点去公司，晚上能早点回家；因为一天超过12个小时在公司和上下班的途中，个人的生活空间会变得很窄，没有能够自由分配的个人时间，让人感觉一天天里不是在上班就是在上班的路上。单休的日子更是令人变得忙碌奔波，小部分的周日回学校一趟办点事，拍毕业照、考六级等等；大部分的周日在家睡觉补觉，因为回校的路程实在漫长，坐地铁需要差不多两个小时更是劝退了我那颗想回学校的心。醒来后吃完饭，在附近走一走逛一逛，一天就这样过去了，晚上早点休息迎战接下来新的一周。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>　　7月份的时候，去面试了广州帝释天软件有限公司的“Unity3D实习生”职位。很荣幸在面试的时候遇到了一位从腾讯出来的聪哥，面试期间双方都很融洽，犹如一位亲切的老大哥。至今对他印象记忆犹新的是：面试时做的那份笔试试题，在面试过程中交流我的想法时，说错了或者试题上有些太明白的地方会给我讲解得很清楚很透彻。这也是我面试过的几家里面，唯一一家让我强烈感受到这个公司的作风做法，是有往大公司发展潜力的。而后我也顺利地在这个公司里实习了半年。<br>　　直到现在我还记得办理入职的那个早晨，签合同签实习协议保密协议，人事妹子领着我们拿物品和参观公司，一直到新工位，这一切仿佛发生在昨日。那天有个小伙伴跟我也是一同办理入职，没记错的话他是做游戏角色模型，虽然后面他离职了，我们偶尔也会联络一下。<br>　　刚刚入职，聪哥带我认识了一下技术部门的主要骨干，技术总监天哥，架构师东少，拉结尔主程元叔等。在职前期带领我的是天哥，他主要负责入职人员的培训和引导新人快速上手，同组还有几个是应届生，我是唯一的实习生。无论是应届生还是实习生，人事招人是希望你可以贡献价值给公司。公司有四个项目组，在入职一个月后，分配到了公司一个还处于初期阶段的项目里，主程正是面试我的聪哥。很庆幸能在这个项目组期间，看到了一个项目是怎么从无到有的过程，这是一个难得的机会，因为很多公司不会一开始就让实习生接触新项目，大多是安排去做旧项目的维护。<br>　　在项目组中，主要人员分配有3个策划，3个前端，3个后端，PM等，后面加入了1个测试和1个前端分担工作量。我所负责做的是使用FairyGUI对场景UI的搭建并导出代码到Unity中使用，其次是使用C#语言对业务代码的逻辑处理。在这几个月工作的过程中，最令我烦恼的是涉及到前后端的通信协议部分，也是在学校里没有接触过的领域，导致有时候出现了问题，不知道从何查起；出现异常的时候不知道到底是前端的Bug还是后端的Bug，原因无法定位；或者遇到一些功能不知道应该如何实现，这种实现方式到底好不好等等状况。感谢枫哥每次找他的时候会帮我分析问题所在和为我指点思路。实习阶段里，秉持着不懂就问，少说多做多思考的原则，在公司学到不少在学校里无法吸取的教训。在成长的道路上，能有一群帮助自己的小伙伴是一件很棒的事情。</p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h2><p>　　有人跟我说：”趁还在学校赶紧找个女朋友吧，不然出了社会，就找不到校园的那种感觉了。”的确，出来社会以后，不管是男方还是女方物色的过程，其实是一个人与人之间比较的过程。车房家庭条件等等都会作为衡量你是不是他/她的“菜”的标准，掺杂了很多因素在这份感情，让很多人觉得不是在跟自己谈恋爱，而是在跟物质谈恋爱。而对于我自己来说，在等缘分的到来，她未出现应该是缘分尚未到。再加上现如今的经济条件和个人能力还不足以支撑自己去谈恋爱，还不能够去负担得起这个责任。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　下班黄金3小时，是“超车的好时机”。“一万小时定律”，是作家格拉德威尔在《异类》一书中指出：“人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。 1万小时的锤炼是任何人从平凡变成超凡的必要条件”。每天3小时，一年下来你拥有1095小时去超越没有利用下班后时间的人。<br>　　但贵在坚持！自认个人是一个很容易被分散注意力的人。一旦分散了注意力，会很难再次进入集中状态。所以我日常的做法是：在做某一件事的时候，避免被其他事所干扰混杂；手机设个定时器，定时器没响这段时间里不会去看手机。这是最笨的方法，也是最好的方法。</p><h2 id="2020年的目标"><a href="#2020年的目标" class="headerlink" title="2020年的目标"></a>2020年的目标</h2><p>　　今年要毕业了，回想起2016年家姐送我来学校的时候，至今历历在目。一眨眼就四年过去了，在校期间看了四次木棉花的盛开，入学时我还在想，4年后的自己会变成什么样子呢？现在的模样是否符合当初期望的模样呢？成长是一步一步积累的过程，在这个过程中，有大目标有小目标，达成大目标需要很多小目标来堆积。每天向着小目标前进让自己过得充实，大目标达成时回想起来应该是一段美好的时光吧。<br>　　2020年大目标罗列:<br>　　1、通过六级。<br>　　2、广东省考。<br>　　3、顺利通过答辩，拿到毕业证书。<br>　　4、一次旅游。<br>　　5、是否转行，确立好方向。（考公，考研，考教资，继续研究技术）<br>　　6、国考。<br>　　7、秋招目标腾讯。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Blog</title>
      <link href="/2019/12/28/first-blog/"/>
      <url>/2019/12/28/first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="轩叔2014演唱会《酷爱》高能现场"><a href="#轩叔2014演唱会《酷爱》高能现场" class="headerlink" title="轩叔2014演唱会《酷爱》高能现场"></a>轩叔2014演唱会《酷爱》高能现场</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=5697679&amp;bvid=BV1ms411C7Gn&amp;cid=9252459&amp;page=1" scrolling="no" border="0" frameborder="0" framespacing="0" loading="lazy" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h2 id="轩叔和菀之演唱会《该死的快乐》高能现场"><a href="#轩叔和菀之演唱会《该死的快乐》高能现场" class="headerlink" title="轩叔和菀之演唱会《该死的快乐》高能现场"></a>轩叔和菀之演唱会《该死的快乐》高能现场</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=49164207&amp;bvid=BV1Sb411K76m&amp;cid=86100007&amp;page=1" scrolling="no" border="0" frameborder="0" framespacing="0" loading="lazy" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
